name: Workflow for DB 
on:
  pull_request:
    types:
      - closed

jobs:
  after_merge:
    if: github.event.pull_request.merged == true
   
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Node.js setup
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
    
      - name: Start MySQL
        run: |
          sudo /etc/init.d/mysql start
      - name: Debug Secrets
        run: |
          echo "Git User: ${{ secrets.GIT_USER }}"
          echo "DB Password: ${{ secrets.DB_PASSWORD }}"
      - name: Connect to MySQL
        run:  mysql --user=root --password=root
      - name: Create DB    
        run:  mysql -e "CREATE DATABASE IF NOT EXISTS $DB_DATABASE;" -u $DB_USER -p$DB_PASSWORD
        env: 
          DB_DATABASE: demoDb
          DB_USER: root
          DB_PASSWORD: root

      - name: Zip webapp
        run:  |
          zip -r webapp.zip . -x   ".git/*" ".github/*"

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test
        env: 
            DB: demoDb
            USER_NAME: root
            DB_PASSWORD: root
            PORT: 3000
            HOST: localhost
      - name: Authenticate gcloud
        id: auth 
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.SERVICE_ACCOUNT_JSON}}"
      - name: Setup gcloud 
        uses: google-github-actions/setup-gcloud@v2
      - name: gcloud CLI
        run: gcloud info
      - name: Initialize Packer
        id: init
        if: success()
        run: packer init webappPacker.pkr.hcl
      - name: Format pkr
        id: fmt
        if: success()
        run: packer fmt webappPacker.pkr.hcl
      - name: Validate Packer
        if: success()
        run: packer validate webappPacker.pkr.hcl
      
      - name: Build Packer
        if: success()
        run: packer build -machine-readable webappPacker.pkr.hcl | tee build.log IMAGE_ID=$(grep 'artifact,0,id' build.log | cut -d, -f6 | cut -d' ' -f2  > IMAGE_ID.txt)
      - name: Fetch Secrets
        run: |
          echo "DB_HOST=$(echo $(gcloud secrets versions access latest --secret='db_host') )" >> $GITHUB_ENV
          echo "DB_NAME=$(echo $(gcloud secrets versions access latest --secret='db_name'))" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(echo $(gcloud secrets versions access latest --secret='db-password') )" >> $GITHUB_ENV
          echo "DB_USER=$(echo $(gcloud secrets versions access latest --secret='db_username') )" >> $GITHUB_ENV
          echo "KMS_KEY_SELF_LINK=$(echo $(gcloud secrets versions access latest --secret='kms_key'))" >> $GITHUB_ENV
          echo "SERVICE_ACCOUNT_EMAIL=$(echo $(gcloud secrets versions access latest --secret='service_account_email') )" >> $GITHUB_ENV
          echo "IMAGE_ID=$(cat IMAGE_ID.txt)" >> $GITHUB_ENV
          echo "template_name=centos-vm-template-$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
         
     
      - name: Create Instance Template
        run: |
          TIMESTAMP=$(date +"%Y%m%d%H%M%S") 
          TEMPLATE_NAME=${csye6225-custom-instance-$TIMESTAMP} 
          gcloud compute instance-templates create-with-container csye6225-custom-instance-$TIMESTAMP \
          --machine-type=e2-standard-2
          --container-image=$IMAGE_ID
          --subnet=webapp \
          --region=us-east1 \
          --service-account=$SERVICE_ACCOUNT_EMAIL\
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --metadata=db-user=$DB_USER,db-name=$DB_NAME,db-host=$DB_HOST,db-pass=$DB_PASSWORD,startup-script="${{secrets.ENVIRONMENTFILE}}" \
          --boot-disk-type=pd-balanced \
          --boot-disk-kms-key=$KMS_KEY_SELF_LINK
      - name: Configure MIG
        run: 
          gcloud compute instance-groups managed set-instance-template INSTANCE_GROUP_NAME \
          --template=csye6225-custom-instance-$TIMESTAMP \
          --region us-east1
          --zone=YOUR_ZONE
        env:
          INSTANCE_GROUP_NAME: webapp-igm
          YOUR_ZONE: us-east1-c
      - name: Rolling Update
        run: gcloud compute instance-groups managed rolling-action start-update INSTANCE_GROUP_NAME \
            --version=template=${TEMPLATE_NAME}
            [--zone=ZONE | --region=REGION]
        env:
              INSTANCE_GROUP_NAME: webapp-igm
              ZONE: us-east1-c
              REGION: us-east1


  
